#include "stdafx.h"
#include "JointJson.h"


CJointJson::CJointJson()
{
	jointWinLiaoJson();
	std::string json_str = jointWinLiaoJson1();
	analysisWinLiaoJson(json_str);
}


CJointJson::~CJointJson()
{
}
/*
* 拼接微聊json
*/
std::string CJointJson::jointWinLiaoJson() {
	//mtrace();
	int iValue;
	double fTimeout;
	std::string strValue;
	neb::CJsonObject oJson("{\"refresh_interval\":60,"
		"\"timeout\":12.5,"
		"\"dynamic_loading\":["
		"{"
		"\"so_path\":\"plugins/User.so\", \"load\":false, \"version\":1,"
		"\"cmd\":["
		"{\"cmd\":2001, \"class\":\"neb::CmdUserLogin\"},"
		"{\"cmd\":2003, \"class\":\"neb::CmdUserLogout\"}"
		"],"
		"\"module\":["
		"{\"path\":\"im/user/login\", \"class\":\"neb::ModuleLogin\"},"
		"{\"path\":\"im/user/logout\", \"class\":\"neb::ModuleLogout\"}"
		"]"
		"},"
		"{"
		"\"so_path\":\"plugins/ChatMsg.so\", \"load\":false, \"version\":1,"
		"\"cmd\":["
		"{\"cmd\":2001, \"class\":\"neb::CmdChat\"}"
		"],"
		"\"module\":[]"
		"}"
		"]"
		"}");
	std::cout << oJson.ToFormattedString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;
	//neb::CJsonObject oJson;
	std::cout << oJson["dynamic_loading"][0]["cmd"][1]("class") << std::endl;
	oJson["dynamic_loading"][0]["cmd"][0].Get("cmd", iValue);
	//std::cout << "iValue = " << iValue << std::endl;
	oJson["dynamic_loading"][0]["cmd"][0].Replace("cmd", -2001);
	oJson["dynamic_loading"][0]["cmd"][0].Get("cmd", iValue);
	oJson.Get("refresh_interval",iValue);
	/*std::cout << "iValue = " << iValue << std::endl;
	oJson.Get("timeout", fTimeout);
	std::cout << "fTimeout = " << fTimeout << std::endl;
	oJson["dynamic_loading"][0]["module"][0].Get("path", strValue);
	std::cout << "strValue = " << strValue << std::endl;*/
	std::cout << oJson.ToFormattedString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;
	oJson.AddEmptySubObject("depend");
	oJson["depend"].Add("nebula", "https://github.com/Bwar/Nebula");
	oJson["depend"].AddEmptySubArray("bootstrap");
	oJson["depend"]["bootstrap"].Add("BEACON");
	oJson["depend"]["bootstrap"].Add("LOGIC");
	oJson["depend"]["bootstrap"].Add("LOGGER");
	oJson["depend"]["bootstrap"].Add("INTERFACE");
	oJson["depend"]["bootstrap"].Add("ACCESS");
	std::cout << oJson.ToString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;
	std::cout << oJson.ToFormattedString() << std::endl;

	std::cout << "-------------------------------------------------------------------" << std::endl;
	neb::CJsonObject oCopyJson = oJson;
	if (oCopyJson == oJson)
	{
		std::cout << "json equal" << std::endl;
	}
	oCopyJson["depend"]["bootstrap"].Delete(1);
	oCopyJson["depend"].Replace("nebula", "https://github.com/Bwar/CJsonObject");
	std::cout << oCopyJson.ToString() << std::endl;
	std::cout << "-------------------------key traverse------------------------------" << std::endl;
	std::string strTraversing;
	while (oJson["dynamic_loading"][0].GetKey(strTraversing))
	{
		std::cout << strTraversing << std::endl;
	}
	std::cout << "---------------add a new key, then key traverse---------------------" << std::endl;
	oJson["dynamic_loading"][0].Add("new_key", "new_value");
	while (oJson["dynamic_loading"][0].GetKey(strTraversing))
	{
		std::cout << strTraversing << std::endl;
	}
	return strTraversing;
}

std::string CJointJson::jointWinLiaoJson1() {
	neb::CJsonObject oJson;
	oJson.AddEmptySubObject("data");
	oJson["data"].AddEmptySubObject("info");
	oJson["data"]["info"].Add("appId","10001");
	oJson["data"]["info"].Add("gardenId", "105199");
	oJson["data"]["info"].Add("roomid", "107035");
	oJson["data"]["info"].Add("time", "2019-05-05 15:15:16");
	oJson["data"]["info"].Add("game_type", "6L2s6L2s6bq75bCG");
	oJson["data"]["info"].Add("jushu", "2/8");

	oJson["data"].AddEmptySubArray("users");

	neb::CJsonObject oJson_name1;
	oJson_name1.Add("userId", "20001");
	oJson_name1.Add("userName", "20001");
	oJson_name1.Add("headUrl", "aHR0cDovL3RoaXJkd3gucWxvZ28uY24vbW1vcGVuL3ZpXzMyL29PNXFjNEpoQkZoZDU4amRUNGdUbHdXRHlNU0E4b0tlcTh2NGd0ajk4RGxjVmJLSGhVVWRMZXlpYVBhajhqd2pjMjNkVm1FQko0ZTI0MzZOcUQwSHhpYXcvMTMy");
	oJson_name1.Add("score", "5");
	oJson_name1.Add("unionid", "onbytwstcU5x4mb1rGAV2Zt_ZTfI");

	oJson["data"]["users"].Add(oJson_name1);
	neb::CJsonObject oJson_name2;
	oJson_name2.Add("userId", "20002");
	oJson_name2.Add("userName", "20002");
	oJson_name2.Add("headUrl", "aHR0cDovL3RoaXJkd3gucWxvZ28uY24vbW1vcGVuL3ZpXzMyL29PNXFjNEpoQkZoZDU4amRUNGdUbHdXRHlNU0E4b0tlcTh2NGd0ajk4RGxjVmJLSGhVVWRMZXlpYVBhajhqd2pjMjNkVm1FQko0ZTI0MzZOcUQwSHhpYXcvMTMy");
	oJson_name2.Add("score", "-5");
	oJson_name2.Add("unionid", "onbytwstcU5x4mb1rGAV2Zt_ZTfI");
	oJson["data"]["users"].Add(oJson_name2);
	/*std::cout << oJson.ToString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;
	std::cout << oJson.ToFormattedString() << std::endl;

	std::cout << "-------------------------------------------------------------------" << std::endl;*/
	return oJson.ToString();
}

void CJointJson::analysisWinLiaoJson(std::string json_str) {
	//解析json数据
	neb::CJsonObject oJson(json_str);
	std::string app_id;
	std::string gardenId;
	std::string roomid;
	std::string time;
	std::string game_type;
	std::string jushu;
	//Get函数使用时要注意插入时的类型
	oJson["data"]["info"].Get("appId", app_id);
	oJson["data"]["info"].Get("gardenId", gardenId);
	oJson["data"]["info"].Get("roomid", roomid);
	oJson["data"]["info"].Get("time", time);
	oJson["data"]["info"].Get("game_type", game_type);
	oJson["data"]["info"].Get("jushu", jushu);
	typedef struct user_data
	{
		std::string userId;
		std::string userName;
		std::string headUrl;
		std::string score;
		std::string unionid;
	}USER;
	std::list<USER> user_list;
	for (int size_t = 0;size_t < oJson["data"]["users"].GetArraySize();size_t++)
	{
		USER _user_data;
		oJson["data"]["users"][size_t].Get("userId", _user_data.userId);
		oJson["data"]["users"][size_t].Get("userName", _user_data.userName);
		oJson["data"]["users"][size_t].Get("headUrl", _user_data.headUrl);
		oJson["data"]["users"][size_t].Get("score", _user_data.score);
		oJson["data"]["users"][size_t].Get("unionid", _user_data.unionid);
		user_list.push_back(_user_data);
	}
	
	neb::CJsonObject oJson_user;
	oJson["data"]["users"].Get(0, oJson_user);
	std::cout << "--------------------获取users其中一项-----------------------------" << std::endl;
	std::cout << oJson_user.ToFormattedString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;
	oJson_user = oJson["data"]["users"];
	std::cout << "--------------------获取users所有内容-----------------------------" << std::endl;
	std::cout << oJson_user.ToFormattedString() << std::endl;
	std::cout << "-------------------------------------------------------------------" << std::endl;

	std::cout << "--------------------获取users所有键值-----------------------------" << std::endl;
	std::list<std::string> user_ket_list;
	//int size_count = oJson["data"]["users"][0].GetKey();
	if (oJson["data"]["users"].GetArraySize() != 0)
	{
		std::string key_list;
		while (oJson["data"]["users"][0].GetKey(key_list))
		{
			user_ket_list.push_back(key_list);
		}
	}
	for (std::string _key : user_ket_list)
	{
		std::cout << _key << std::endl;
	}
	std::cout << "-------------------------------------------------------------------" << std::endl;
}